#!/usr/bin/env hy

(import [random [random randint]])
(import subprocess)
(import [sh [mpc hn criclive]])

(defn music []
  "Return current music"
  (let [prefix "♫ | "
        song (first (.splitlines (str (mpc))))]
    (if (.startswith song "volume: ")
      '()
      (+ prefix song))))

(defn news []
  "Return random top news from hacker news"
  (let [prefix "ℋ | "
        hn-lines (.splitlines (hn.top))
        selected (nth hn-lines (* 2 (randint 0 9)))
        text (second (.split selected "\x1b[0m"))]
    (+ prefix (.strip text))))

(defn cricket []
  "Cricket scores"
  (let [prefix "ℭ | "
        teams '("india"
                "australia"
                "pakistan"
                "sri lanka"
                "new zealand"
                "england"
                "west indies"
                "south africa"
                "royal challenger bangalore"
                "rising pune supergiant"
                "kolkata knight riders"
                "gujarat lions"
                "delhi daredevils"
                "kings xi punjab"
                "mumbai indians"
                "sunrisers hyderabad")
        criclive-lines (.splitlines (criclive))
        filtered (filter (fn [x]
                           (let [out False]
                             (for [team teams]
                               (if (in team (.lower x))
                                 (do (setv out True)
                                     (break))))
                             out)) criclive-lines)
        filtered-live (list (filter (fn [x]
                                      (not (in "[]" (.lower x))))
                                    filtered))]
    (if (> (len filtered-live) 0)
      (let [text (nth filtered-live (randint 0 (- (len filtered-live) 1)))]
        (+ prefix (.join " " (cut (.split text ". ") 1))))
      '())))

(defn clip [text]
  "Clip text to a limit"
  (let [limit 70]
    (if (> (len text) limit)
      (+ (cut text 0 limit) "...")
      text)))

(defmacro follow-chain [conditions]
  (if (not (empty? conditions))
    `(let [text ~(car conditions)]
       (if text (print (clip text))
           (follow-chain ~(cdr conditions))))))

(defmain [&rest args]
  (let [r (random)]
    (cond [(> r 0.75) (follow-chain ((music) (cricket) (news)))]
          [(> r 0.4) (follow-chain ((cricket) (news)))]
          [True (follow-chain ((news)))])))
